digraph ml {
    ndTestMotorGroup[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nTestMotorGroup|+ inverted: Arc&lt;RwLock&lt;bool&gt;&gt;\n+ speed: Arc&lt;RwLock&lt;f32&gt;&gt;\n+ motor_group: MotorGroup}"][shape="record"];
    ndMotorGroup[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nMotorGroup|- motors: Vec&lt;Box&lt;MotorController&gt;&gt;\n- old_speed: f32|+ new(motors: Vec&lt;Box&lt;MotorController&gt;&gt;) -&gt; Self\n+ set_speed(&amp;mut self, new_speed: f32)\n+ stop(&amp;mut self)\n+ invert(&amp;mut self)\n+ maintain_last(&amp;mut self)\n+ get_states(&amp;self) -&gt; Vec&lt;MotorState&gt;\n- run_operation(&amp;mut self, operation: T)}"][shape="record"];
    ndTestMotor[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nTestMotor|- inverted: Arc&lt;RwLock&lt;bool&gt;&gt;\n- speed: Arc&lt;RwLock&lt;f32&gt;&gt;\n- state: MotorState|+ new(inverted: Arc&lt;RwLock&lt;bool&gt;&gt;, speed: Arc&lt;RwLock&lt;f32&gt;&gt;) -&gt; TestMotor\n- set_motor_state(&amp;mut self, new_state: MotorState)}"][shape="record"];
    ndHoverBoardMotor[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nHoverBoardMotor|- is_inverted: bool\n- pwm: Pwm\n- direction: Pin\n- state: MotorState|+ create(pwm: Pwm, direction: Pin, id: MotorID) -&gt; Result&lt;Self, ()&gt;}"][shape="record"];
    ndPrintMotor[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nPrintMotor|- name: String\n- inverted: bool\n- last: f32\n- is_stopped: bool|+ new(name: &amp;str) -&gt; PrintMotor}"][shape="record"];
    ndMotorStateKind[label="{&lt;&lt;&lt;Enumeration&gt;&gt;&gt;\nMotorStateKind|UnknownFailure\nUnexportedFailure\nOk}"][shape="record"];
    ndMotorController[label="{&lt;&lt;&lt;Trait&gt;&gt;&gt;\nMotorController|get_motor_state(&amp;Self) -&gt; MotorState}"][shape="record"];
    ndMotorState[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nMotorState|- motor: MotorID\n- kind: MotorStateKind|+ new(motor: MotorID, kind: MotorStateKind) -&gt; Self\n+ get_motor(&amp;self) -&gt; MotorID\n+ get_kind(&amp;self) -&gt; MotorStateKind}"][shape="record"];
    ndTestMotorGroup[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nTestMotorGroup|+ inverted: Arc&lt;RwLock&lt;bool&gt;&gt;\n+ speed: Arc&lt;RwLock&lt;f32&gt;&gt;\n+ motor_group: MotorGroup}"][shape="record"];
    ndDumper[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nDumper|- is_enabled: bool\n- motors: MotorGroup\n- state: DumperState\n- life: GlobalLifeStatus}"][shape="record"];
    ndDumperState[label="{&lt;&lt;&lt;Enumeration&gt;&gt;&gt;\nDumperState|Dumping\nResetting\nStopped|+ new(life: GlobalLifeStatus, motors: MotorGroup) -&gt; Self\n+ enable(&amp;mut self)\n+ disable(&amp;mut self)\n+ dump(&amp;mut self)\n+ reset(&amp;mut self)\n+ stop(&amp;mut self)\n+ run_cycle(&amp;mut self)}"][shape="record"];
    ndTestMotorGroup[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nTestMotorGroup|+ inverted: Arc&lt;RwLock&lt;bool&gt;&gt;\n+ speed: Arc&lt;RwLock&lt;f32&gt;&gt;\n+ motor_group: MotorGroup}"][shape="record"];
    ndActuatorState[label="{&lt;&lt;&lt;Enumeration&gt;&gt;&gt;\nActuatorState|Rising\nLowering\nStopped}"][shape="record"];
    ndDiggerState[label="{&lt;&lt;&lt;Enumeration&gt;&gt;&gt;\nDiggerState|Digging\nStopped}"][shape="record"];
    ndBucketLadder[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nBucketLadder|- is_enabled: bool\n- actuators: MotorGroup\n- digger: MotorGroup\n- digger_state: DiggerState\n- actuator_state: ActuatorState\n- life: GlobalLifeStatus|+ new(digger: MotorGroup, actuators: MotorGroup, life: GlobalLifeStatus) -&gt; Self\n+ enable(&amp;mut self)\n+ disable(&amp;mut self)\n+ raise(&amp;mut self)\n+ lower(&amp;mut self)\n+ stop_actuators(&amp;mut self)\n+ dig(&amp;mut self)\n+ stop_digging(&amp;mut self)\n+ run_cycle(&amp;mut self)}"][shape="record"];
    ndTestMotorGroup[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nTestMotorGroup|+ inverted: Arc&lt;RwLock&lt;bool&gt;&gt;\n+ speed: Arc&lt;RwLock&lt;f32&gt;&gt;\n+ motor_group: MotorGroup}"][shape="record"];
    ndDriveTrain[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nDriveTrain|- is_enabled: bool\n- left: MotorGroup\n- right: MotorGroup\n- robot_status: GlobalLifeStatus|+ new(left: MotorGroup, right: MotorGroup, robot_status: GlobalLifeStatus) -&gt; DriveTrain\n+ run_cycle(&amp;mut self)\n+ drive(&amp;mut self, left_speed: f32, right_speed: f32)\n+ brake(&amp;mut self)\n+ enable(&amp;mut self)\n+ disable(&amp;mut self)\n+ get_motor_states(&amp;self) -&gt; Vec&lt;MotorState&gt;\n- maintain_last(&amp;mut self)}"][shape="record"];
    ndRobotController[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nRobotController|- driver_station_view: ServerSender\n- command_receiver: Receiver&lt;MechatronicsCommand&gt;\n- drive_train: DriveTrain\n- dumper: Dumper\n- ladder: BucketLadder\n- life_status: GlobalLifeStatus|+ new(driver_station_view: ServerSender, command_receiver: Receiver&lt;MechatronicsCommand&gt;, drive_train: DriveTrain, dumper: Dumper, ladder: BucketLadder, life_status: GlobalLifeStatus) -&gt; Self\n- handle_message(&amp;mut self, message: MechatronicsCommand)\n- process_states(&amp;mut self)}"][shape="record"];
    ndRobotLifeStatus[label="{&lt;&lt;&lt;Enumeration&gt;&gt;&gt;\nRobotLifeStatus|Alive\nDead}"][shape="record"];
    ndGlobalLifeStatus[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nGlobalLifeStatus|- status: Arc&lt;RwLock&lt;RobotLifeStatus&gt;&gt;|+ new() -&gt; Self\n+ get_status(&amp;self) -&gt; RobotLifeStatus\n+ is_alive(&amp;self) -&gt; bool\n+ kill(&amp;self)\n+ revive(&amp;self)}"][shape="record"];
    ndMechatronicsCommand[label="{&lt;&lt;&lt;Enumeration&gt;&gt;&gt;\nMechatronicsCommand|Drive(DriveCommandMessage)\nBrake\nEnableDrive\nDisableDrive\nEnableDumper\nDisableDumper\nEnableBucketLadder\nDisableBucketLadder\nDump\nResetDumper\nStopDumper\nDig\nStopDigging\nRaiseDigger\nLowerDigger\nFreezeDiggerHeight}"][shape="record"];
    ndMechatronicsMessageSender[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nMechatronicsMessageSender|- channel: Sender&lt;MechatronicsCommand&gt;\n- robot_life_status: GlobalLifeStatus|+ new(channel: Sender&lt;MechatronicsCommand&gt;, robot_life_status: GlobalLifeStatus) -&gt; Self\n+ revive(&amp;self)\n+ kill(&amp;self)\n+ drive(&amp;self, left: f32, right: f32) -&gt; Result&lt;(), ()&gt;\n+ brake(&amp;self)\n+ enable_drive_train(&amp;self)\n+ disable_drive_train(&amp;self)\n+ disable_dumper(&amp;self)\n+ enable_dumper(&amp;self)\n+ dump(&amp;self)\n+ reset_dumper(&amp;self)\n+ stop_dumper(&amp;self)\n+ enable_ladder(&amp;self)\n+ disable_ladder(&amp;self)\n+ dig(&amp;self)\n+ stop_digger(&amp;self)\n+ raise_ladder(&amp;self)\n+ lower_ladder(&amp;self)\n+ freeze_ladder_height(&amp;self)\n- send_command(&amp;self, command: MechatronicsCommand)}"][shape="record"];
    ndDriveCommandMessage[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nDriveCommandMessage|- left_speed: f32\n- right_speed: f32|+ create(left_speed: f32, right_speed: f32) -&gt; Result&lt;Self, ()&gt;\n+ get_left_speed(&amp;self) -&gt; f32\n+ get_right_speed(&amp;self) -&gt; f32}"][shape="record"];
    ndTestEnvironment[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nTestEnvironment|- receiver: Receiver&lt;MechatronicsCommand&gt;\n- sender: ServerSender\n- client: Client\n- status: GlobalLifeStatus}"][shape="record"];
    ndSendableMessage[label="{&lt;&lt;&lt;Trait&gt;&gt;&gt;\nSendableMessage|encode(&amp;Self) -&gt; String}"][shape="record"];
    ndServerSender[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nServerSender|- channel: Sender&lt;Box&lt;SendableMessage&gt;&gt;|+ send_message(&amp;self, message: Box&lt;SendableMessage&gt;)\n- new(channel: Sender&lt;Box&lt;SendableMessage&gt;&gt;) -&gt; Self}"][shape="record"];
    ndServerState[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nServerState|- receiver: Mutex&lt;Receiver&lt;Box&lt;SendableMessage&gt;&gt;&gt;\n- robot_controller: Mutex&lt;MechatronicsMessageSender&gt;}"][shape="record"];
    ndDrive[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nDrive}"][shape="record"];
    ndRobotBuilder[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nRobotBuilder|- left_drive: MotorGroup\n- right_drive: MotorGroup\n- digger: MotorGroup\n- rails: MotorGroup\n- dumper: MotorGroup|+ use_custom_drive(&amp;mut self, left: MotorGroup, right: MotorGroup)\n+ use_custom_intake(&amp;mut self, digger: MotorGroup, rails: MotorGroup)\n+ use_custom_dumper(&amp;mut self, dumper: MotorGroup)\n+ use_real_drive(&amp;mut self)\n+ new() -&gt; Self\n+ build(self) -&gt; Robot}"][shape="record"];
    ndRobot[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nRobot|- controller: RobotController\n- bfr: Rocket|- new(controller: RobotController, bfr: Rocket) -&gt; Self\n+ launch(self)\n+ launch_tester(self) -&gt; Client}"][shape="record"];
    ndRunnable[label="{&lt;&lt;&lt;Trait&gt;&gt;&gt;\nRunnable|}"][shape="record"];
    ndTestMotorGroup[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nTestMotorGroup|+ inverted: Arc&lt;RwLock&lt;bool&gt;&gt;\n+ speed: Arc&lt;RwLock&lt;f32&gt;&gt;\n+ motor_group: MotorGroup}"][shape="record"];
    ndMotorID[label="{&lt;&lt;&lt;Enumeration&gt;&gt;&gt;\nMotorID|DriveTrainFrontLeft\nDriveTrainFrontRight\nDriveTrainRearLeft\nDriveTrainRearRight\nNull}"][shape="record"];
    ndMotorGroup -> ndTestMotorGroup[label=""][arrowhead="diamond"];
    ndMotorGroup -> ndDumper[label=""][arrowhead="diamond"];
    ndMotorGroup -> ndDumperState[label=""][style="dashed"][arrowhead="vee"];
    ndMotorGroup -> ndBucketLadder[label=""][style="dashed"][arrowhead="diamond"];
    ndMotorGroup -> ndDriveTrain[label=""][style="dashed"][arrowhead="diamond"];
    ndMotorGroup -> ndRobotBuilder[label=""][style="dashed"][arrowhead="diamond"];
    ndMotorStateKind -> ndMotorState[label=""][style="dashed"][arrowhead="diamond"];
    ndMotorController -> ndMotorGroup[label=""][arrowhead="diamond"];
    ndMotorController -> ndTestMotor[label=""][style="dashed"][arrowhead="onormal"];
    ndMotorController -> ndHoverBoardMotor[label=""][style="dashed"][arrowhead="onormal"];
    ndMotorController -> ndPrintMotor[label=""][style="dashed"][arrowhead="onormal"];
    ndMotorState -> ndMotorGroup[label=""][arrowhead="vee"];
    ndMotorState -> ndTestMotor[label=""][style="dashed"][arrowhead="diamond"];
    ndMotorState -> ndHoverBoardMotor[label=""][arrowhead="diamond"];
    ndMotorState -> ndPrintMotor[label=""][arrowhead="vee"];
    ndMotorState -> ndDriveTrain[label=""][arrowhead="vee"];
    ndDumper -> ndRobotController[label=""][style="dashed"][arrowhead="diamond"];
    ndDumperState -> ndDumper[label=""][arrowhead="diamond"];
    ndActuatorState -> ndBucketLadder[label=""][arrowhead="diamond"];
    ndDiggerState -> ndBucketLadder[label=""][arrowhead="diamond"];
    ndBucketLadder -> ndRobotController[label=""][style="dashed"][arrowhead="diamond"];
    ndDriveTrain -> ndRobotController[label=""][style="dashed"][arrowhead="diamond"];
    ndRobotController -> ndRobot[label=""][style="dashed"][arrowhead="diamond"];
    ndRobotLifeStatus -> ndGlobalLifeStatus[label=""][arrowhead="diamond"];
    ndGlobalLifeStatus -> ndDumper[label=""][arrowhead="diamond"];
    ndGlobalLifeStatus -> ndDumperState[label=""][style="dashed"][arrowhead="vee"];
    ndGlobalLifeStatus -> ndBucketLadder[label=""][style="dashed"][arrowhead="diamond"];
    ndGlobalLifeStatus -> ndDriveTrain[label=""][style="dashed"][arrowhead="diamond"];
    ndGlobalLifeStatus -> ndRobotController[label=""][style="dashed"][arrowhead="diamond"];
    ndGlobalLifeStatus -> ndMechatronicsMessageSender[label=""][style="dashed"][arrowhead="diamond"];
    ndGlobalLifeStatus -> ndTestEnvironment[label=""][arrowhead="diamond"];
    ndMechatronicsCommand -> ndRobotController[label=""][style="dashed"][arrowhead="diamond"];
    ndMechatronicsCommand -> ndMechatronicsMessageSender[label=""][style="dashed"][arrowhead="diamond"];
    ndMechatronicsCommand -> ndTestEnvironment[label=""][arrowhead="diamond"];
    ndMechatronicsMessageSender -> ndServerState[label=""][arrowhead="diamond"];
    ndDriveCommandMessage -> ndMechatronicsCommand[label=""][arrowhead="diamond"];
    ndSendableMessage -> ndMotorState[label=""][style="dashed"][arrowhead="onormal"];
    ndSendableMessage -> ndServerSender[label=""][arrowhead="diamond"];
    ndSendableMessage -> ndServerState[label=""][arrowhead="diamond"];
    ndServerSender -> ndRobotController[label=""][style="dashed"][arrowhead="diamond"];
    ndServerSender -> ndTestEnvironment[label=""][arrowhead="diamond"];
    ndRobot -> ndRobotBuilder[label=""][arrowhead="vee"];
    ndRunnable -> ndRobotController[label=""][style="dashed"][arrowhead="onormal"];
    ndMotorID -> ndHoverBoardMotor[label=""][style="dashed"][arrowhead="vee"];
    ndMotorID -> ndMotorState[label=""][style="dashed"][arrowhead="diamond"];
}
