digraph ml {
    ndPwmMotor[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nPwmMotor|- is_inverted: bool\n- id: MotorID\n- pwm: Pwm\n- direction: Pin|+ create(pwm: Pwm, direction: Pin, id: MotorID) -&gt; Result&lt;Self, ()&gt;}"][shape="record"];
    ndTestMotorGroup[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nTestMotorGroup|+ inverted: Arc&lt;RwLock&lt;bool&gt;&gt;\n+ speed: Arc&lt;RwLock&lt;f32&gt;&gt;\n+ motor_group: MotorGroup}"][shape="record"];
    ndMotorGroup[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nMotorGroup|- is_inverted: bool\n- motors: Vec&lt;Box&lt;MotorController&gt;&gt;\n- old_speed: f32|+ new(motors: Vec&lt;Box&lt;MotorController&gt;&gt;) -&gt; Self\n+ set_speed(&amp;mut self, new_speed: f32) -&gt; Result&lt;(), Vec&lt;MotorFailure&gt;&gt;\n+ stop(&amp;mut self) -&gt; Result&lt;(), Vec&lt;MotorFailure&gt;&gt;\n+ invert(&amp;mut self) -&gt; Result&lt;(), Vec&lt;MotorFailure&gt;&gt;\n+ is_inverted(&amp;self) -&gt; bool\n+ maintain_last(&amp;mut self) -&gt; Result&lt;(), Vec&lt;MotorFailure&gt;&gt;\n- run_operation(&amp;mut self, operation: T) -&gt; Result&lt;(), Vec&lt;MotorFailure&gt;&gt;}"][shape="record"];
    ndTestMotor[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nTestMotor|- inverted: Arc&lt;RwLock&lt;bool&gt;&gt;\n- speed: Arc&lt;RwLock&lt;f32&gt;&gt;|+ new(inverted: Arc&lt;RwLock&lt;bool&gt;&gt;, speed: Arc&lt;RwLock&lt;f32&gt;&gt;) -&gt; TestMotor}"][shape="record"];
    ndPrintMotor[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nPrintMotor|- name: String\n- inverted: bool\n- last: f32|+ new(name: &amp;str) -&gt; PrintMotor}"][shape="record"];
    ndMotorFailureKind[label="{&lt;&lt;&lt;Enumeration&gt;&gt;&gt;\nMotorFailureKind|Unknown}"][shape="record"];
    ndMotorController[label="{&lt;&lt;&lt;Trait&gt;&gt;&gt;\nMotorController|set_speed(&amp;mut Self, f32) -&gt; Result&lt;(), MotorFailure&gt;\nstop(&amp;mut Self) -&gt; Result&lt;(), MotorFailure&gt;\ninvert(&amp;mut Self) -&gt; Result&lt;(), MotorFailure&gt;\nis_inverted(&amp;Self) -&gt; Result&lt;bool, MotorFailure&gt;}"][shape="record"];
    ndMotorFailure[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nMotorFailure|- motor: MotorID\n- kind: MotorFailureKind|+ new(motor: MotorID, kind: MotorFailureKind) -&gt; Self\n+ get_motor(&amp;self) -&gt; MotorID\n+ get_kind(&amp;self) -&gt; MotorFailureKind}"][shape="record"];
    ndSensor[label="{&lt;&lt;&lt;Trait&gt;&gt;&gt;\nSensor|}"][shape="record"];
    ndSendableMessage[label="{&lt;&lt;&lt;Trait&gt;&gt;&gt;\nSendableMessage|encode(&amp;Self) -&gt; String}"][shape="record"];
    ndServerSender[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nServerSender|- channel: Sender&lt;Box&lt;SendableMessage&gt;&gt;|+ send_message(&amp;self, message: Box&lt;SendableMessage&gt;)\n- new(channel: Sender&lt;Box&lt;SendableMessage&gt;&gt;) -&gt; Self}"][shape="record"];
    ndServerState[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nServerState|- receiver: Mutex&lt;Receiver&lt;Box&lt;SendableMessage&gt;&gt;&gt;\n- robot_controller: Mutex&lt;RobotView&gt;}"][shape="record"];
    ndDrive[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nDrive}"][shape="record"];
    ndRunnable[label="{&lt;&lt;&lt;Trait&gt;&gt;&gt;\nRunnable|}"][shape="record"];
    ndMotorID[label="{&lt;&lt;&lt;Enumeration&gt;&gt;&gt;\nMotorID|DriveTrainFrontLeft\nDriveTrainFrontRight\nDriveTrainRearLeft\nDriveTrainRearRight}"][shape="record"];
    ndTestMotorGroup[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nTestMotorGroup|+ inverted: Arc&lt;RwLock&lt;bool&gt;&gt;\n+ speed: Arc&lt;RwLock&lt;f32&gt;&gt;\n+ motor_group: MotorGroup}"][shape="record"];
    ndDriveTrain[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nDriveTrain|- is_enabled: bool\n- left: MotorGroup\n- right: MotorGroup\n- robot_status: Arc&lt;RwLock&lt;RobotLifeStatus&gt;&gt;|+ new(left: MotorGroup, right: MotorGroup, robot_status: Arc&lt;RwLock&lt;RobotLifeStatus&gt;&gt;) -&gt; DriveTrain\n+ run_cycle(&amp;mut self) -&gt; Result&lt;(), Vec&lt;MotorFailure&gt;&gt;\n+ drive(&amp;mut self, left_speed: f32, right_speed: f32) -&gt; Result&lt;(), Vec&lt;MotorFailure&gt;&gt;\n+ brake(&amp;mut self) -&gt; Result&lt;(), Vec&lt;MotorFailure&gt;&gt;\n+ enable(&amp;mut self)\n+ disable(&amp;mut self) -&gt; Result&lt;(), Vec&lt;MotorFailure&gt;&gt;\n- maintain_last(&amp;mut self) -&gt; Result&lt;(), Vec&lt;MotorFailure&gt;&gt;}"][shape="record"];
    ndRobotController[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nRobotController|- driver_station_view: ServerSender\n- command_receiver: Receiver&lt;RobotControllerCommand&gt;\n- drive_train: DriveTrain\n- life_status: Arc&lt;RwLock&lt;RobotLifeStatus&gt;&gt;|+ new(driver_station_view: ServerSender, command_receiver: Receiver&lt;RobotControllerCommand&gt;, drive_train: DriveTrain, life_status: Arc&lt;RwLock&lt;RobotLifeStatus&gt;&gt;) -&gt; Self}"][shape="record"];
    ndRobotLifeStatus[label="{&lt;&lt;&lt;Enumeration&gt;&gt;&gt;\nRobotLifeStatus|Alive\nDead}"][shape="record"];
    ndRobotControllerCommand[label="{&lt;&lt;&lt;Enumeration&gt;&gt;&gt;\nRobotControllerCommand|Drive(DriveCommandMessage)\nBrake\nEnable\nDisable}"][shape="record"];
    ndRobotView[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nRobotView|- channel: Sender&lt;RobotControllerCommand&gt;\n- robot_life_status: Arc&lt;RwLock&lt;RobotLifeStatus&gt;&gt;|+ new(channel: Sender&lt;RobotControllerCommand&gt;, robot_life_status: Arc&lt;RwLock&lt;RobotLifeStatus&gt;&gt;) -&gt; Self\n+ revive(&amp;self) -&gt; Result&lt;(), ()&gt;\n+ kill(&amp;self) -&gt; Result&lt;(), ()&gt;\n+ drive(&amp;self, left: f32, right: f32) -&gt; Result&lt;(), ()&gt;\n+ brake(&amp;self)\n+ enable_drive_train(&amp;self)\n+ disable_drive_train(&amp;self)\n- send_command(&amp;self, command: RobotControllerCommand)\n- change_life_status(&amp;self, status: RobotLifeStatus) -&gt; Result&lt;(), ()&gt;}"][shape="record"];
    ndDriveCommandMessage[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nDriveCommandMessage|- left_speed: f32\n- right_speed: f32|+ create(left_speed: f32, right_speed: f32) -&gt; Result&lt;Self, ()&gt;}"][shape="record"];
    ndMotorGroup -> ndTestMotorGroup[label=""][arrowhead="diamond"];
    ndMotorGroup -> ndDriveTrain[label=""][style="dashed"][arrowhead="diamond"];
    ndMotorFailureKind -> ndMotorFailure[label=""][style="dashed"][arrowhead="diamond"];
    ndMotorController -> ndPwmMotor[label=""][style="dashed"][arrowhead="onormal"];
    ndMotorController -> ndMotorGroup[label=""][arrowhead="diamond"];
    ndMotorController -> ndTestMotor[label=""][style="dashed"][arrowhead="onormal"];
    ndMotorController -> ndPrintMotor[label=""][style="dashed"][arrowhead="onormal"];
    ndMotorFailure -> ndPwmMotor[label=""][arrowhead="vee"];
    ndMotorFailure -> ndMotorGroup[label=""][arrowhead="vee"];
    ndMotorFailure -> ndTestMotor[label=""][arrowhead="vee"];
    ndMotorFailure -> ndPrintMotor[label=""][arrowhead="vee"];
    ndMotorFailure -> ndDriveTrain[label=""][arrowhead="vee"];
    ndSendableMessage -> ndMotorFailure[label=""][style="dashed"][arrowhead="onormal"];
    ndSendableMessage -> ndServerSender[label=""][arrowhead="diamond"];
    ndSendableMessage -> ndServerState[label=""][arrowhead="diamond"];
    ndServerSender -> ndRobotController[label=""][style="dashed"][arrowhead="diamond"];
    ndRunnable -> ndRobotController[label=""][style="dashed"][arrowhead="onormal"];
    ndMotorID -> ndPwmMotor[label=""][style="dashed"][arrowhead="diamond"];
    ndMotorID -> ndMotorFailure[label=""][style="dashed"][arrowhead="diamond"];
    ndDriveTrain -> ndRobotController[label=""][style="dashed"][arrowhead="diamond"];
    ndRobotLifeStatus -> ndDriveTrain[label=""][arrowhead="diamond"];
    ndRobotLifeStatus -> ndRobotController[label=""][arrowhead="diamond"];
    ndRobotLifeStatus -> ndRobotView[label=""][style="dashed"][arrowhead="diamond"];
    ndRobotControllerCommand -> ndRobotController[label=""][arrowhead="diamond"];
    ndRobotControllerCommand -> ndRobotView[label=""][style="dashed"][arrowhead="diamond"];
    ndRobotView -> ndServerState[label=""][arrowhead="diamond"];
    ndDriveCommandMessage -> ndRobotControllerCommand[label=""][arrowhead="diamond"];
}
