digraph ml {
    ndGlobalDriveTrainState[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nGlobalDriveTrainState|- enabled: AtomicBool\n- left: Arc&lt;GlobalMotorState&gt;\n- right: Arc&lt;GlobalMotorState&gt;|+ new() -&gt; Self\n+ get_enabled(&amp;self) -&gt; bool\n+ set_enabled(&amp;self, enabled: bool)\n+ get_left(&amp;self) -&gt; Arc&lt;GlobalMotorState&gt;\n+ get_right(&amp;self) -&gt; Arc&lt;GlobalMotorState&gt;\n+ get_current_state(&amp;self) -&gt; DriveTrainStateInstance}"][shape="record"];
    ndDriveTrainStateInstance[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nDriveTrainStateInstance|- enabled: bool\n- left: MotorStateInstance\n- right: MotorStateInstance|- new(enabled: bool, left: MotorStateInstance, right: MotorStateInstance) -&gt; Self\n+ get_enabled(&amp;self) -&gt; bool\n+ get_left(&amp;self) -&gt; &amp;MotorStateInstance\n+ get_right(&amp;self) -&gt; &amp;MotorStateInstance}"][shape="record"];
    ndDriveTrain[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nDriveTrain|- state: Arc&lt;GlobalDriveTrainState&gt;\n- left: Box&lt;MotorController&gt;\n- right: Box&lt;MotorController&gt;\n- robot_status: Arc&lt;GlobalLifeState&gt;|+ new(state: Arc&lt;GlobalDriveTrainState&gt;, left: Box&lt;MotorController&gt;, right: Box&lt;MotorController&gt;, robot_status: Arc&lt;GlobalLifeState&gt;) -&gt; Self\n+ run_cycle(&amp;mut self)\n+ drive(&amp;mut self, left_speed: f32, right_speed: f32)\n+ brake(&amp;mut self)\n+ enable(&amp;mut self)\n+ disable(&amp;mut self)}"][shape="record"];
    ndMechState[label="{&lt;&lt;&lt;Enumeration&gt;&gt;&gt;\nMechState|Digging\nDriving\nDumping}"][shape="record"];
    ndRobotController[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nRobotController|- command_receiver: Receiver&lt;MechatronicsCommand&gt;\n- drive_train: DriveTrain\n- dumper: Dumper\n- intake: Intake\n- life: Arc&lt;GlobalLifeState&gt;\n- state: MechState|+ new(command_receiver: Receiver&lt;MechatronicsCommand&gt;, drive_train: DriveTrain, dumper: Dumper, intake: Intake, life: Arc&lt;GlobalLifeState&gt;) -&gt; Self\n- handle_message(&amp;mut self, message: MechatronicsCommand)}"][shape="record"];
    ndGlobalDumperState[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nGlobalDumperState|- enabled: AtomicBool\n- motor: Arc&lt;GlobalMotorState&gt;|+ new() -&gt; Self\n+ get_current_state(&amp;self) -&gt; DumperStateInstance\n+ get_motor(&amp;self) -&gt; Arc&lt;GlobalMotorState&gt;\n+ set_enabled(&amp;self, enabled: bool)\n+ get_enabled(&amp;self) -&gt; bool}"][shape="record"];
    ndDumperStateInstance[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nDumperStateInstance|- enabled: bool\n- motor: MotorStateInstance|- new(enabled: bool, motor: MotorStateInstance) -&gt; Self\n+ get_enabled(&amp;self) -&gt; bool\n+ get_motor(&amp;self) -&gt; &amp;MotorStateInstance}"][shape="record"];
    ndDumper[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nDumper|- motors: Box&lt;MotorController&gt;\n- state: Arc&lt;GlobalDumperState&gt;\n- life: Arc&lt;GlobalLifeState&gt;|+ new(life: Arc&lt;GlobalLifeState&gt;, motors: Box&lt;MotorController&gt;, state: Arc&lt;GlobalDumperState&gt;) -&gt; Self\n+ enable(&amp;mut self)\n+ disable(&amp;mut self)\n+ dump(&amp;mut self)\n+ reset(&amp;mut self)\n+ stop(&amp;mut self)\n+ run_cycle(&amp;mut self)}"][shape="record"];
    ndMechatronicsCommand[label="{&lt;&lt;&lt;Enumeration&gt;&gt;&gt;\nMechatronicsCommand|EnterDriveMode\nEnterDumpMode\nEnterDiggingMode\nDrive(DriveCommandMessage)\nBrake\nDump\nResetDumper\nStopDumper\nDig\nStopDigging\nRaiseActuators\nLowerActuators\nStopActuators|+ drive(self) -&gt; Option&lt;DriveCommandMessage&gt;}"][shape="record"];
    ndMechatronicsMessageSender[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nMechatronicsMessageSender|- channel: Sender&lt;MechatronicsCommand&gt;\n- state: Arc&lt;GlobalRobotState&gt;|+ new(channel: Sender&lt;MechatronicsCommand&gt;, state: Arc&lt;GlobalRobotState&gt;) -&gt; Self\n+ revive(&amp;self)\n+ kill(&amp;self)\n+ drive(&amp;self, left: f32, right: f32) -&gt; Result&lt;(), ()&gt;\n+ switch_to_drive(&amp;self)\n+ switch_to_dig(&amp;self)\n+ switch_to_dump(&amp;self)\n+ brake(&amp;self)\n+ dump(&amp;self)\n+ reset_dumper(&amp;self)\n+ stop_dumper(&amp;self)\n+ dig(&amp;self)\n+ stop_digger(&amp;self)\n+ raise_ladder(&amp;self)\n+ lower_ladder(&amp;self)\n+ stop_actuators(&amp;self)\n- send_command(&amp;self, command: MechatronicsCommand)}"][shape="record"];
    ndDriveCommandMessage[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nDriveCommandMessage|- left_speed: f32\n- right_speed: f32|+ create(left_speed: f32, right_speed: f32) -&gt; Result&lt;Self, ()&gt;\n+ get_left_speed(&amp;self) -&gt; f32\n+ get_right_speed(&amp;self) -&gt; f32}"][shape="record"];
    ndIntakeEnvironment[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nIntakeEnvironment|+ state: Arc&lt;GlobalIntakeState&gt;\n+ life: Arc&lt;GlobalLifeState&gt;\n+ intake: Intake}"][shape="record"];
    ndGlobalLadderState[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nGlobalLadderState|- motor: Arc&lt;GlobalMotorState&gt;|+ new() -&gt; Self\n+ get_motor(&amp;self) -&gt; Arc&lt;GlobalMotorState&gt;\n+ get_current_state(&amp;self) -&gt; LadderStateInstance}"][shape="record"];
    ndLadderStateInstance[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nLadderStateInstance|- motor: MotorStateInstance|- new(motor: MotorStateInstance) -&gt; Self\n+ get_motor(&amp;self) -&gt; &amp;MotorStateInstance}"][shape="record"];
    ndGlobalIntakeState[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nGlobalIntakeState|- left_actuator: Arc&lt;GlobalActuatorState&gt;\n- right_actuator: Arc&lt;GlobalActuatorState&gt;\n- ladder: Arc&lt;GlobalLadderState&gt;\n- enabled: AtomicBool|+ new() -&gt; Self\n+ get_current_state(&amp;self) -&gt; IntakeStateInstance\n+ set_enabled(&amp;self, enabled: bool)\n+ get_left_actuator(&amp;self) -&gt; Arc&lt;GlobalActuatorState&gt;\n+ get_right_actuator(&amp;self) -&gt; Arc&lt;GlobalActuatorState&gt;\n+ get_ladder(&amp;self) -&gt; Arc&lt;GlobalLadderState&gt;\n+ get_enabled(&amp;self) -&gt; bool}"][shape="record"];
    ndIntakeStateInstance[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nIntakeStateInstance|- left_actuator: ActuatorStateInstance\n- right_actuator: ActuatorStateInstance\n- ladder: LadderStateInstance\n- enabled: bool|- new(left_actuator: ActuatorStateInstance, right_actuator: ActuatorStateInstance, ladder: LadderStateInstance, enabled: bool) -&gt; Self\n+ get_left_actuator(&amp;self) -&gt; &amp;ActuatorStateInstance\n+ get_right_actuator(&amp;self) -&gt; &amp;ActuatorStateInstance\n+ get_ladder(&amp;self) -&gt; &amp;LadderStateInstance\n+ get_enabled(&amp;self) -&gt; bool}"][shape="record"];
    ndGlobalActuatorState[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nGlobalActuatorState|- upper: Arc&lt;AtomicBool&gt;\n- lower: Arc&lt;AtomicBool&gt;\n- motor: Arc&lt;GlobalMotorState&gt;|+ new() -&gt; Self\n+ get_current_state(&amp;self) -&gt; ActuatorStateInstance\n+ set_upper(&amp;self, upper: bool)\n+ set_lower(&amp;self, lower: bool)\n+ get_upper(&amp;self) -&gt; Arc&lt;AtomicBool&gt;\n+ get_lower(&amp;self) -&gt; Arc&lt;AtomicBool&gt;\n+ get_motor(&amp;self) -&gt; Arc&lt;GlobalMotorState&gt;}"][shape="record"];
    ndActuatorStateInstance[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nActuatorStateInstance|- upper: bool\n- lower: bool\n- motor: MotorStateInstance|- new(upper: bool, lower: bool, motor: MotorStateInstance) -&gt; Self\n+ get_upper(&amp;self) -&gt; bool\n+ get_lower(&amp;self) -&gt; bool\n+ get_motor(&amp;self) -&gt; &amp;MotorStateInstance}"][shape="record"];
    ndIntake[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nIntake|- left_actuator: Box&lt;MotorController&gt;\n- right_actuator: Box&lt;MotorController&gt;\n- ladder: Box&lt;MotorController&gt;\n- state: Arc&lt;GlobalIntakeState&gt;\n- life: Arc&lt;GlobalLifeState&gt;|+ new(ladder: Box&lt;MotorController&gt;, left_actuator: Box&lt;MotorController&gt;, right_actuator: Box&lt;MotorController&gt;, state: Arc&lt;GlobalIntakeState&gt;, life: Arc&lt;GlobalLifeState&gt;) -&gt; Self\n+ enable(&amp;mut self)\n+ disable(&amp;mut self)\n+ raise(&amp;mut self)\n+ lower(&amp;mut self)\n+ stop_actuators(&amp;mut self)\n+ dig(&amp;mut self)\n+ stop_ladder(&amp;mut self)\n+ run_cycle(&amp;mut self)}"][shape="record"];
    ndTestEnvironment[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nTestEnvironment|- receiver: Receiver&lt;MechatronicsCommand&gt;\n- client: Client\n- status: Arc&lt;GlobalRobotState&gt;}"][shape="record"];
    ndServerState[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nServerState|- messager: Mutex&lt;MechatronicsMessageSender&gt;\n- state: Arc&lt;GlobalRobotState&gt;}"][shape="record"];
    ndDrive[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nDrive}"][shape="record"];
    ndRunnable[label="{&lt;&lt;&lt;Trait&gt;&gt;&gt;\nRunnable|}"][shape="record"];
    ndRobotBuilder[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nRobotBuilder|- left_drive: Box&lt;MotorController&gt;\n- right_drive: Box&lt;MotorController&gt;\n- digger: Box&lt;MotorController&gt;\n- left_actuator: Box&lt;MotorController&gt;\n- right_actuator: Box&lt;MotorController&gt;\n- dumper: Box&lt;MotorController&gt;\n- state: Arc&lt;GlobalRobotState&gt;|+ get_state(&amp;self) -&gt; Arc&lt;GlobalRobotState&gt;\n+ with_test(&amp;mut self)\n+ use_real_drive(&amp;mut self)\n+ new() -&gt; Self\n+ build(self) -&gt; Robot}"][shape="record"];
    ndRobot[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nRobot|- controller: RobotController\n- bfr: Rocket|- new(controller: RobotController, bfr: Rocket) -&gt; Self\n+ launch(self)\n+ launch_tester(self) -&gt; Client}"][shape="record"];
    ndSysfsPin[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nSysfsPin|- pin: sysfs_gpio::Pin|+ create(pin_num: u64, board_location: &amp;str) -&gt; Option&lt;Self&gt;}"][shape="record"];
    ndSysfsPwm[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nSysfsPwm|- pwm: sysfs_pwm::Pwm\n- chip: u32\n- number: u32|+ create(chip: u32, number: u32, board_location: &amp;str) -&gt; sysfs_pwm::Result&lt;Self&gt;}"][shape="record"];
    ndDigitalInput[label="{&lt;&lt;&lt;Trait&gt;&gt;&gt;\nDigitalInput|get_value(&amp;Self) -&gt; Option&lt;bool&gt;}"][shape="record"];
    ndDigitalOutput[label="{&lt;&lt;&lt;Trait&gt;&gt;&gt;\nDigitalOutput|set_value(&amp;mut Self, bool) -&gt; Result&lt;(), String&gt;}"][shape="record"];
    ndAnalogOutput[label="{&lt;&lt;&lt;Trait&gt;&gt;&gt;\nAnalogOutput|set_value(&amp;mut Self, f32) -&gt; Result&lt;(), String&gt;}"][shape="record"];
    ndTestPin[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nTestPin|- state: Arc&lt;AtomicBool&gt;|+ new(state: Arc&lt;AtomicBool&gt;) -&gt; Self}"][shape="record"];
    ndTestPwm[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nTestPwm|- state: Arc&lt;atomic::Atomic&lt;f32&gt;&gt;|+ new(state: Arc&lt;atomic::Atomic&lt;f32&gt;&gt;) -&gt; Self}"][shape="record"];
    ndTestMotor[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nTestMotor|- state: Arc&lt;GlobalMotorState&gt;|+ new(state: Arc&lt;GlobalMotorState&gt;) -&gt; TestMotor}"][shape="record"];
    ndHoverBoardMotor[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nHoverBoardMotor|- pwm: Box&lt;AnalogOutput&gt;\n- direction: Box&lt;DigitalOutput&gt;\n- state: GlobalMotorState|+ new(pwm: Box&lt;AnalogOutput&gt;, direction: Box&lt;DigitalOutput&gt;) -&gt; Self}"][shape="record"];
    ndMotorGroup[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nMotorGroup|- motors: Vec&lt;Box&lt;MotorController&gt;&gt;\n- state: Arc&lt;GlobalMotorState&gt;|+ new(motors: Vec&lt;Box&lt;MotorController&gt;&gt;, state: Arc&lt;GlobalMotorState&gt;) -&gt; Self}"][shape="record"];
    ndPrintMotor[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nPrintMotor|- name: String\n- state: Arc&lt;GlobalMotorState&gt;\n- is_stopped: bool|+ new(name: &amp;str, state: Arc&lt;GlobalMotorState&gt;) -&gt; PrintMotor}"][shape="record"];
    ndMotorController[label="{&lt;&lt;&lt;Trait&gt;&gt;&gt;\nMotorController|get_motor_state(&amp;Self) -&gt; &amp;GlobalMotorState}"][shape="record"];
    ndGlobalMotorState[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nGlobalMotorState|- speed: Atomic&lt;f32&gt;|+ new() -&gt; Self\n+ get_current_state(&amp;self) -&gt; MotorStateInstance\n+ get_speed(&amp;self) -&gt; f32\n+ set_speed(&amp;self, value: f32)}"][shape="record"];
    ndMotorStateInstance[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nMotorStateInstance|- speed: f32|+ new(speed: f32) -&gt; Self\n+ get_speed(&amp;self) -&gt; f32}"][shape="record"];
    ndInvertedMotor[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nInvertedMotor|- motor: Box&lt;MotorController&gt;|+ new(motor: Box&lt;MotorController&gt;) -&gt; Self}"][shape="record"];
    ndDualLimitMotor[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nDualLimitMotor|- motor: Box&lt;MotorController&gt;\n- upper: Arc&lt;AtomicBool&gt;\n- lower: Arc&lt;AtomicBool&gt;|+ new(motor: Box&lt;MotorController&gt;, upper: Arc&lt;AtomicBool&gt;, lower: Arc&lt;AtomicBool&gt;) -&gt; Self}"][shape="record"];
    ndFlagMotor[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nFlagMotor|- motor: Box&lt;MotorController&gt;\n- disabled: Arc&lt;AtomicBool&gt;|+ new(motor: Box&lt;MotorController&gt;, disabled: Arc&lt;AtomicBool&gt;) -&gt; Self}"][shape="record"];
    ndGlobalRobotState[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nGlobalRobotState|- life: Arc&lt;GlobalLifeState&gt;\n- drive: Arc&lt;GlobalDriveTrainState&gt;\n- dumper: Arc&lt;GlobalDumperState&gt;\n- intake: Arc&lt;GlobalIntakeState&gt;|+ new() -&gt; Self\n+ get_life(&amp;self) -&gt; Arc&lt;GlobalLifeState&gt;\n+ get_drive(&amp;self) -&gt; Arc&lt;GlobalDriveTrainState&gt;\n+ get_dumper(&amp;self) -&gt; Arc&lt;GlobalDumperState&gt;\n+ get_intake(&amp;self) -&gt; Arc&lt;GlobalIntakeState&gt;\n+ get_current_state(&amp;self) -&gt; RobotStateInstance}"][shape="record"];
    ndRobotStateInstance[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nRobotStateInstance|- life: LifeStateInstance\n- drive: DriveTrainStateInstance\n- dumper: DumperStateInstance\n- intake: IntakeStateInstance|+ new(life: LifeStateInstance, drive: DriveTrainStateInstance, dumper: DumperStateInstance, intake: IntakeStateInstance) -&gt; Self\n+ get_life(&amp;self) -&gt; &amp;LifeStateInstance\n+ get_drive(&amp;self) -&gt; &amp;DriveTrainStateInstance\n+ get_dumper(&amp;self) -&gt; &amp;DumperStateInstance\n+ get_intake(&amp;self) -&gt; &amp;IntakeStateInstance}"][shape="record"];
    ndGlobalLifeState[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nGlobalLifeState|- life: AtomicBool|+ new() -&gt; Self\n+ is_alive(&amp;self) -&gt; bool\n+ kill(&amp;self)\n+ revive(&amp;self)\n+ get_current_state(&amp;self) -&gt; LifeStateInstance}"][shape="record"];
    ndLifeStateInstance[label="{&lt;&lt;&lt;Structure&gt;&gt;&gt;\nLifeStateInstance|- life: bool|- new(life: bool) -&gt; Self\n+ get_life(&amp;self) -&gt; bool}"][shape="record"];
    ndGlobalDriveTrainState -> ndDriveTrain[label=""][arrowhead="diamond"];
    ndGlobalDriveTrainState -> ndGlobalRobotState[label=""][arrowhead="diamond"];
    ndDriveTrainStateInstance -> ndGlobalDriveTrainState[label=""][arrowhead="vee"];
    ndDriveTrainStateInstance -> ndRobotStateInstance[label=""][style="dashed"][arrowhead="diamond"];
    ndDriveTrain -> ndRobotController[label=""][style="dashed"][arrowhead="diamond"];
    ndMechState -> ndRobotController[label=""][arrowhead="diamond"];
    ndRobotController -> ndRobot[label=""][style="dashed"][arrowhead="diamond"];
    ndGlobalDumperState -> ndDumper[label=""][arrowhead="diamond"];
    ndGlobalDumperState -> ndGlobalRobotState[label=""][arrowhead="diamond"];
    ndDumperStateInstance -> ndGlobalDumperState[label=""][arrowhead="vee"];
    ndDumperStateInstance -> ndRobotStateInstance[label=""][style="dashed"][arrowhead="diamond"];
    ndDumper -> ndRobotController[label=""][style="dashed"][arrowhead="diamond"];
    ndMechatronicsCommand -> ndRobotController[label=""][style="dashed"][arrowhead="diamond"];
    ndMechatronicsCommand -> ndMechatronicsMessageSender[label=""][style="dashed"][arrowhead="diamond"];
    ndMechatronicsCommand -> ndTestEnvironment[label=""][arrowhead="diamond"];
    ndMechatronicsMessageSender -> ndServerState[label=""][arrowhead="diamond"];
    ndDriveCommandMessage -> ndMechatronicsCommand[label=""][arrowhead="diamond"];
    ndGlobalLadderState -> ndGlobalIntakeState[label=""][arrowhead="diamond"];
    ndLadderStateInstance -> ndGlobalLadderState[label=""][arrowhead="vee"];
    ndLadderStateInstance -> ndIntakeStateInstance[label=""][style="dashed"][arrowhead="diamond"];
    ndGlobalIntakeState -> ndIntakeEnvironment[label=""][arrowhead="diamond"];
    ndGlobalIntakeState -> ndIntake[label=""][arrowhead="diamond"];
    ndGlobalIntakeState -> ndGlobalRobotState[label=""][arrowhead="diamond"];
    ndIntakeStateInstance -> ndGlobalIntakeState[label=""][arrowhead="vee"];
    ndIntakeStateInstance -> ndRobotStateInstance[label=""][style="dashed"][arrowhead="diamond"];
    ndGlobalActuatorState -> ndGlobalIntakeState[label=""][arrowhead="diamond"];
    ndActuatorStateInstance -> ndIntakeStateInstance[label=""][style="dashed"][arrowhead="diamond"];
    ndActuatorStateInstance -> ndGlobalActuatorState[label=""][arrowhead="vee"];
    ndIntake -> ndRobotController[label=""][style="dashed"][arrowhead="diamond"];
    ndIntake -> ndIntakeEnvironment[label=""][arrowhead="diamond"];
    ndRunnable -> ndRobotController[label=""][style="dashed"][arrowhead="onormal"];
    ndRobot -> ndRobotBuilder[label=""][arrowhead="vee"];
    ndDigitalInput -> ndSysfsPin[label=""][style="dashed"][arrowhead="onormal"];
    ndDigitalOutput -> ndSysfsPin[label=""][style="dashed"][arrowhead="onormal"];
    ndDigitalOutput -> ndTestPin[label=""][style="dashed"][arrowhead="onormal"];
    ndDigitalOutput -> ndHoverBoardMotor[label=""][arrowhead="diamond"];
    ndAnalogOutput -> ndSysfsPwm[label=""][style="dashed"][arrowhead="onormal"];
    ndAnalogOutput -> ndTestPwm[label=""][style="dashed"][arrowhead="onormal"];
    ndAnalogOutput -> ndHoverBoardMotor[label=""][arrowhead="diamond"];
    ndMotorController -> ndDriveTrain[label=""][arrowhead="diamond"];
    ndMotorController -> ndDumper[label=""][arrowhead="diamond"];
    ndMotorController -> ndIntake[label=""][arrowhead="diamond"];
    ndMotorController -> ndRobotBuilder[label=""][arrowhead="diamond"];
    ndMotorController -> ndTestMotor[label=""][style="dashed"][arrowhead="onormal"];
    ndMotorController -> ndHoverBoardMotor[label=""][style="dashed"][arrowhead="onormal"];
    ndMotorController -> ndMotorGroup[label=""][style="dashed"][arrowhead="diamond"];
    ndMotorController -> ndPrintMotor[label=""][style="dashed"][arrowhead="onormal"];
    ndMotorController -> ndInvertedMotor[label=""][style="dashed"][arrowhead="diamond"];
    ndMotorController -> ndDualLimitMotor[label=""][style="dashed"][arrowhead="diamond"];
    ndMotorController -> ndFlagMotor[label=""][style="dashed"][arrowhead="diamond"];
    ndGlobalMotorState -> ndGlobalDriveTrainState[label=""][arrowhead="diamond"];
    ndGlobalMotorState -> ndGlobalDumperState[label=""][arrowhead="diamond"];
    ndGlobalMotorState -> ndGlobalLadderState[label=""][arrowhead="diamond"];
    ndGlobalMotorState -> ndGlobalActuatorState[label=""][arrowhead="diamond"];
    ndGlobalMotorState -> ndTestMotor[label=""][arrowhead="diamond"];
    ndGlobalMotorState -> ndHoverBoardMotor[label=""][arrowhead="diamond"];
    ndGlobalMotorState -> ndMotorGroup[label=""][arrowhead="diamond"];
    ndGlobalMotorState -> ndPrintMotor[label=""][arrowhead="diamond"];
    ndMotorStateInstance -> ndDriveTrainStateInstance[label=""][style="dashed"][arrowhead="diamond"];
    ndMotorStateInstance -> ndDumperStateInstance[label=""][style="dashed"][arrowhead="diamond"];
    ndMotorStateInstance -> ndLadderStateInstance[label=""][style="dashed"][arrowhead="diamond"];
    ndMotorStateInstance -> ndActuatorStateInstance[label=""][style="dashed"][arrowhead="diamond"];
    ndMotorStateInstance -> ndGlobalMotorState[label=""][arrowhead="vee"];
    ndGlobalRobotState -> ndMechatronicsMessageSender[label=""][arrowhead="diamond"];
    ndGlobalRobotState -> ndTestEnvironment[label=""][arrowhead="diamond"];
    ndGlobalRobotState -> ndServerState[label=""][arrowhead="diamond"];
    ndGlobalRobotState -> ndRobotBuilder[label=""][arrowhead="diamond"];
    ndRobotStateInstance -> ndGlobalRobotState[label=""][arrowhead="vee"];
    ndGlobalLifeState -> ndDriveTrain[label=""][arrowhead="diamond"];
    ndGlobalLifeState -> ndRobotController[label=""][arrowhead="diamond"];
    ndGlobalLifeState -> ndDumper[label=""][arrowhead="diamond"];
    ndGlobalLifeState -> ndIntakeEnvironment[label=""][arrowhead="diamond"];
    ndGlobalLifeState -> ndIntake[label=""][arrowhead="diamond"];
    ndGlobalLifeState -> ndGlobalRobotState[label=""][arrowhead="diamond"];
    ndLifeStateInstance -> ndRobotStateInstance[label=""][style="dashed"][arrowhead="diamond"];
    ndLifeStateInstance -> ndGlobalLifeState[label=""][arrowhead="vee"];
}
